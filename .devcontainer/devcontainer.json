{
	// For quick reference: https://containers.dev/implementors/json_reference/
	"name": "Deepstream",
	"image": "colivier-local/deepstream:0.0014",
	//"build": {
	//"args": {
	//"RUN_UPGRADE": "false"
	//}
	//	"context": "..",
	//	"dockerfile": "Dockerfile"
	//},
	"workspaceFolder": "/home/colivier/src/hm",
	//"workspaceFolder": "${workspaceRoot}",
	// 1. Use 'forwardPorts' to make a list of ports inside the container available locally.
	// "forwardPorts": []
	// 2. Use 'mounts' to make a list of local directories available inside the container. More info: https://code.visualstudio.com/remote/advancedcontainers/add-local-file-mount
	// "mounts": [],
	// 3. Use 'runArgs' to pass arguments to the container. 
	// run the container with all GPUs
	"runArgs": [
		"--gpus",
		"all",
		"-v",
		"${env:HOME}:${env:HOME}",
		"-v",
		"${env:HOME}/.ssh:${env:HOME}/.ssh",
		"-v",
		"/mnt/home:/mnt/home",
		"-v",
		"/mnt/data:/mnt/data",
		"-v",
		"/etc/passwd:/etc/passwd:ro",
		"-v",
		"/etc/group:/etc/group:ro",
		"-v",
		"/etc/shadow:/etc/shadow:ro",
		"-v",
		"/etc/gshadow:/etc/gshadow:ro",
	],
	// 4. Features to add to the Dev Container. More info: https://containers.dev/implementors/features.
	"features": {
		// ZSH without OMZ
		"ghcr.io/devcontainers/features/common-utils:2": {
			//"installZsh": "true",
			//"configureZshAsDefaultShell": "true",
			//"installOhMyZsh": "false",
			//"installOhMyZshConfig": "false",
			"username": "${env:USER}",
			//"userUid": "1000",
			//"userGid": "1000",
			"upgradePackages": "false"
		},
		// git
		"ghcr.io/devcontainers/features/git:1": {
			"version": "os-provided",
			"ppa": "false"
		}
	},
	// 5. Configure tool-specific properties.
	"customizations": {
		// Configure properties specific to VS Code.
		"vscode": {
			// Set *default* container specific settings.json values on container create.
			"settings": {
				"python.defaultInterpreterPath": "${env:HOME}/.conda/envs/ubuntu/bin/python"
			},
			// installs useful extensions
			"extensions": [
				"bazelbuild.vscode-bazel",
				"bierner.markdown-mermaid",
				"bpruitt-goddard.mermaid-markdown-syntax-highlighting",
				"codamasoftware.ai-docs-and-comments",
				"cschlosser.doxdocgen",
				"danielnichols.slurm-dashboard",
				"donjayamanne.python-environment-manager",
				"eamodio.gitlens",
				"emilast.logfilehighlighter",
				"github.copilot",
				"github.copilot-chat",
				"hediet.vscode-drawio",
				"hyunkyunmoon.gzipdecompressor",
				"jock.svg",
				"llvm-vs-code-extensions.vscode-clangd",
				"mechatroner.rainbow-csv",
				"ms-azuretools.vscode-docker",
				"ms-python.black-formatter",
				"ms-python.debugpy",
				"ms-python.flake8",
				"ms-python.isort",
				"ms-python.mypy-type-checker",
				"ms-python.pylint",
				"ms-python.python",
				"ms-python.vscode-pylance",
				"ms-toolsai.jupyter",
				"ms-toolsai.jupyter-keymap",
				"ms-toolsai.jupyter-renderers",
				"ms-toolsai.tensorboard",
				"ms-toolsai.vscode-jupyter-cell-tags",
				"ms-toolsai.vscode-jupyter-slideshow",
				"ms-vscode-remote.remote-containers",
				"ms-vscode-remote.remote-ssh",
				"ms-vscode-remote.remote-ssh-edit",
				"ms-vscode.cmake-tools",
				"ms-vscode.cpptools",
				"ms-vscode.cpptools-extension-pack",
				"ms-vscode.cpptools-themes",
				"ms-vscode.makefile-tools",
				"ms-vscode.remote-explorer",
				"njpwerner.autodocstring",
				"pcsoftware.readable",
				"percy.vscode-numpy-viewer",
				"percy.vscode-pydata-viewer",
				"qiu.llvm-ir-language-support",
				"sanaajani.taskrunnercode",
				"shd101wyy.markdown-preview-enhanced",
				"spmeesseman.vscode-taskexplorer",
				"stackbuild.bazel-stack-vscode",
				"tintinweb.graphviz-interactive-preview",
				"twxs.cmake",
				"vadimcn.vscode-lldb",
				"vscode-icons-team.vscode-icons",
				"xaver.clang-format",
				"zxh404.vscode-proto3",
			]
		}
	},
	// 6. Set `remoteUser` to `root` to connect as root instead. More info: https://aka.ms/vscode-remote/containers/non-root.
	//"remoteUser": "vscode"
	"remoteUser": "${env:USER}"
	// the following commands are related to container lifecylce. More info: https://containers.dev/implementors/json_reference/#lifecycle-scripts
	// 7. Use 'initializeCommand' to run commands ON THE HOST before container is created or started.
	// "initializeCommand": "",
	// 8. Use 'onCreateCommand' to run commands INSIDE THE CONTAINER after it started for the first time.
	// "onCreateCommand": "",
	// 9. Use 'updateContentCommand' to run commands if the root filetree have any changes, during container creation.
	// "updateContentCommand": "",
	// 10. Use 'postCreateCommand' to run commands after the container is created.
	// "postCreateCommand": "pip3 install --user -r requirements.txt",
	// 11. Use 'postStartCommand' to run a command each time the container starts successfully.
	// "postStartCommand": "",
	// 12. Use 'postAttachCommand' to run a command each time a tool attaches to the container successfully. 
	// "postAttachCommand": "",
}
